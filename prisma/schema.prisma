generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  // Relations
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  totalPoints        Int?           @default(0)
  claimedPoints      Int?           @default(0)
  password           String?
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  status             UserStatus     @default(deactivated)
  role               UserRole       @default(client)
  idBusiness         String?
  // Relations
  sessions           Session[]
  accounts           Account[]
  Forecast           Forecast[]
  business           Business?      @relation(fields: [idBusiness], references: [id])
  claimedPrizesStaff ClaimedPrize[] @relation("ClaimedPrizesByStaff")
  claimedPrizes      ClaimedPrize[] @relation("ClaimedPrizesByUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProductType {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  // Relations
  Product   Product[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  idBusiness    String
  image         String
  productTypeId String
  description   String?
  enabled       Boolean        @default(true)
  price         Int            @default(1)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  // Relations
  business      Business       @relation(fields: [idBusiness], references: [id])
  productType   ProductType    @relation(fields: [productTypeId], references: [id])
  ProductPrize  ProductPrize[]
}

model Prize {
  id           String         @id @default(cuid())
  name         String
  idBusiness   String
  points       Int
  description  String?
  enabled      Boolean        @default(true)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  // Relations
  business     Business       @relation(fields: [idBusiness], references: [id])
  ClaimedPrize ClaimedPrize[]
  ProductPrize ProductPrize[]
}

model ProductPrize {
  id        String   @id @default(cuid())
  idPrize   String
  idProduct String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  // Relations
  prize     Prize    @relation(fields: [idPrize], references: [id])
  product   Product  @relation(fields: [idProduct], references: [id])
}

model ClaimedPrize {
  id          String   @id @default(cuid())
  idPrize     String
  idUser      String
  idUserStaff String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  // Relations
  prize       Prize    @relation(fields: [idPrize], references: [id])
  userStaff   User     @relation("ClaimedPrizesByStaff", fields: [idUserStaff], references: [id])
  user        User     @relation("ClaimedPrizesByUser", fields: [idUser], references: [id])
}

model Sport {
  id         String       @id @default(cuid())
  name       String       @unique
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  // Relations
  Team       Team[]
  League     League[]
  Tournament Tournament[]
}

model League {
  id         String       @id @default(cuid())
  name       String       @unique
  sportId    String
  startDate  DateTime
  endDate    DateTime
  enabled    Boolean      @default(true)
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  // Relations
  Sport      Sport        @relation(fields: [sportId], references: [id])
  Tournament Tournament[]
  TeamLeague TeamLeague[]
  Event      Event[]

  @@unique([name, sportId])
}

model Tournament {
  id             String           @id @default(cuid())
  name           String           @unique
  sportId        String
  leagueId       String?
  startDate      DateTime
  endDate        DateTime
  enabled        Boolean          @default(true)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  // Relations
  Sport          Sport            @relation(fields: [sportId], references: [id])
  League         League?          @relation(fields: [leagueId], references: [id])
  TeamTournament TeamTournament[]
  Event          Event[]
}

model Team {
  id             String           @id @default(cuid())
  name           String
  logoUrl        String?
  shortName      String?
  colors         String? //       "#436651, #F40035"
  sportId        String?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  // Relations
  Sport          Sport?           @relation(fields: [sportId], references: [id])
  homeEvents     Event[]          @relation("homeTeamEvents")
  awayEvents     Event[]          @relation("awayTeamEvents")
  TeamTournament TeamTournament[]
  TeamLeague     TeamLeague[]

  @@unique([name, sportId])
}

model TeamLeague {
  id       Int    @id @default(autoincrement())
  teamId   String
  leagueId String
  // Relations
  Team     Team   @relation(fields: [teamId], references: [id])
  League   League @relation(fields: [leagueId], references: [id])

  @@unique([teamId, leagueId])
}

model TeamTournament {
  id           Int        @id @default(autoincrement())
  teamId       String
  tournamentId String
  // Relations
  Team         Team       @relation(fields: [teamId], references: [id])
  Tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([teamId, tournamentId])
}

model Event {
  id            String      @id @default(cuid())
  title         String?
  tournamentId  String?
  leagueId      String?
  dateTime      DateTime
  status        EventStatus
  homeTeamId    String
  awayTeamId    String
  homeTeamScore Int         @default(0)
  awayTeamScore Int         @default(0)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  // Relations
  homeTeam      Team        @relation("homeTeamEvents", fields: [homeTeamId], references: [id])
  awayTeam      Team        @relation("awayTeamEvents", fields: [awayTeamId], references: [id])
  Tournament    Tournament? @relation(fields: [tournamentId], references: [id])
  League        League?     @relation(fields: [leagueId], references: [id])
  Forecast      Forecast[]

  @@unique([homeTeamId, awayTeamId, dateTime])
}

model Forecast {
  id            String         @id @default(cuid())
  idBusiness    String
  idUser        String
  idEvent       String
  date          DateTime
  status        ForecastStatus @default(pending)
  homeTeamScore Int
  awayTeamScore Int
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  // Relations
  business      Business       @relation(fields: [idBusiness], references: [id])
  User          User           @relation(fields: [idUser], references: [id])
  Event         Event          @relation(fields: [idEvent], references: [id])

  @@unique([idUser, idEvent])
}

model Business {
  id                  String                @id @default(cuid())
  name                String
  type                BusinessTypes
  logoUrl             String
  description         String?
  coverImageUrl       String
  country             String
  province            String
  canton              String
  district            String
  address             String
  wazeLink            String?
  googleMapLink       String?
  facebookLink        String?
  instagramLink       String?
  xLink               String?
  phone1              Int?
  phone2              Int?
  email               String?
  plan                BusinessPlan          @default(basic)
  displayProductPrice Boolean               @default(false)
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  slug                String                @unique
  // Relations
  BusinessAdvertising BusinessAdvertising[]
  BusinessScheduled   BusinessScheduled?
  BusinessGallery     BusinessGallery[]
  BusinessEvent       BusinessEvent[]
  Forecast            Forecast[]
  Product             Product[]
  Prize               Prize[]
  User                User[]
}

model BusinessScheduled {
  id               String   @id @default(cuid())
  idBusiness       String   @unique
  mondayOpening    Int?
  mondayClose      Int?
  tuesdayOpening   Int?
  tuesdayClose     Int?
  wednesdayOpening Int?
  wednesdayClose   Int?
  thursdayOpening  Int?
  thursdayClose    Int?
  fridayOpening    Int?
  fridayClose      Int?
  saturdayOpening  Int?
  saturdayClose    Int?
  sundayOpening    Int?
  sundayClose      Int?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  // Relations
  business         Business @relation(fields: [idBusiness], references: [id])
}

model BusinessGallery {
  id         String   @id @default(cuid())
  idBusiness String
  ord        Int?
  image      String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  // Relations
  business   Business @relation(fields: [idBusiness], references: [id])
}

model BusinessAdvertising {
  id         String    @id @default(cuid())
  idBusiness String
  title      String
  image      String
  href       String?
  priority   Int?
  enabled    Boolean   @default(true)
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  // Relations
  business   Business  @relation(fields: [idBusiness], references: [id])
}

model BusinessEvent {
  id          String   @id @default(cuid())
  idBusiness  String
  title       String
  date        DateTime
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  description String?
  image       String?
  // Relations
  business    Business @relation(fields: [idBusiness], references: [id])
}

model Subscription {
  id    String @id @default(cuid())
  name  String
  email String @unique
}

enum UserRole {
  unknown
  client
  master
  admin_rest
  cashier_rest
  waiter_rest
  bartender_rest
}

enum UserStatus {
  unknown
  actived
  suspented
  deactivated
}

enum EventStatus {
  incoming
  live
  finished
  canceled
  pending
  postponed
}

enum ForecastStatus {
  pending
  canceled
  completed
  lost
  won
}

enum BusinessTypes {
  bar
  cafe
  hotel
  sportbar
  restaurant
  sports_club
  bar_restaurant
  shopping_center
  recreation_center
}

enum BusinessPlan {
  basic
  intermediate
  premium
}

enum TournamentStatus {
  upcoming
  ongoing
  completed
  cancelled
}
